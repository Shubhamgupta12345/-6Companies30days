class Solution {
public:
bool back(vector<int>& nums,int tar,int k,int bucket,int start,vector<bool>&vis)
{
    if(k==1)
    {
        return 1;
    }
    if(bucket>tar||start>=nums.size())
    {
        return 0;
    }
    if(bucket==tar)
    {
      return  back(nums,tar,k-1,0,0,vis);
    }
    for(int i=start;i<nums.size();i++)
    {
        if(vis[i])
        {
            continue;
        }
        vis[i]=1;
        if(back(nums,tar,k,bucket+nums[i],i+1,vis))
        {
            return true;
        }
        vis[i]=0;

    }
    return 0;
}
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int target=0;
        for(auto x:nums)
        {
            target+=x;
        }
        if(target%k!=0)
        {
            return 0;
        }
    //    sort(nums.begin(),nums.end());
    //    reverse(nums.begin(),nums.end());
      int tar=target/k;
    vector<bool>vis(nums.size());
    
    return back(nums,tar,k,0,0,vis);

       
    }
};