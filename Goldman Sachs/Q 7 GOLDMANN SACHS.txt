// class Solution {
// public:
//     long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
//         vector<pair<int,vector<int>>>v;
//         for(int i=0;i<nums1.size();i++)
//         {
            

//         }
//     }
// };
// Fenwick Tree Class
class fwk{
public:
   int fenwick[100005];
   int N;
   fwk(int n)
   {
      N = n;
      memset(fenwick,0,sizeof fenwick);
   }

   void update(int index,int x)
   {
      for(int i=index;i<=N;i+=(i&-i))
      {
         fenwick[i]+=x;
      }
   }
   int sum(int index)
   {
      int ans = 0;
      for(int i=index;i>0;i-=(i&-i))
      {
         ans+=fenwick[i];
      }
      return ans;
   }
};

class Solution {
public:

   
    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
        
        int n = nums1.size();

        map<int,int> indices;
        vector<int> B;
  
        for(int i=0;i<nums2.size();i++)
        {
            indices[nums2[i]] = i;
        }
		
		// We know that indices in nums1 array are ordered - so we will do the same with elements of num2 by making seperate vector B which stores indices of element nums1[i] in num2 array 
		// push indices of elements of nums1  array which are in nums2 
        for(int i:nums1)
        {
            B.push_back(indices[i]);
        }

        for(int i=0;i<B.size();i++)
        {
            B[i]++;
        }
        
        long long left[n+2];
        long long right[n+2];
        left[0] = 0;
        right[n+1] = 0;

        fwk L(n);

        for(int i=1;i<=n;i++)
        {
            int ele = B[i-1];
			// count of lesser element to left side
            left[i] = L.sum(ele - 1);
            L.update(ele,1);
        }

        fwk R(n);

        for(int i=n;i>=1;i--)
        {
            int ele = B[i-1];
			// count of greater elements to right
            right[i] = R.sum(n) - R.sum(ele);
            R.update(ele,1);
        }
		
        long long ans = 0;

        for(int i=1;i<=n;i++)
        {
		    // all combinations
			// consider current element as middle and calculate all combinations that can be chosen
            ans = ans + (left[i] * right[i]);
          
        }
        return ans;

    }
};