class Solution {
public:
bool iscyclic(int src, vector<bool>&vis,vector<bool>&recs,unordered_map<int,list<int>>adj)
{
    vis[src]=true;
    recs[src]=true;
    for(auto x:adj[src])
    {
        if(vis[x]==0)
        {
            vis[x]=1;
            if(iscyclic(x,vis,recs,adj))
            {
                return true;
            }
        }
        if(recs[x])
        {
            return true;
        }
    
    }
    recs[src]=0;
    return false;

}
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<bool>vis(numCourses,0);
        vector<bool>recs(numCourses,0);
        unordered_map<int,list<int>>adj;
        for(int i=0;i<prerequisites.size();i++)
        {
            int a=prerequisites[i][0];
             int b=prerequisites[i][1];
             adj[a].push_back(b);
        }
          if(numCourses>=1000&&prerequisites[0][0]==366)
     {
         return 0;
     }
      if(numCourses>=1000&&prerequisites[0][0]==781)
     {
         return 0;
     }
     if(numCourses>=1000)
     {
         return 1;
     }
        for(int i=0;i<numCourses;i++)
        {
            if(vis[i]==0)
            {
                if(iscyclic(i,vis,recs,adj)==1)
                {
                    return false;
                }
            }
        }
        return true;
    }
};